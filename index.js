const { Web3 } = require("web3");
const { ETH_DATA_FORMAT, DEFAULT_RETURN_FORMAT } = require("web3");
async function main() {
  // Configuring the connection to an Ethereum node
  const network = "sepolia"
  let INFURA_API_KEY = "ENTER-API-KEY"
  let SIGNER_PRIVATE_KEY = "ENTER-SIGNER'S-PRIVATE-KEY"
  const web3 = new Web3(
    new Web3.providers.HttpProvider(
      `https://${network}.infura.io/v3/${INFURA_API_KEY}`,
    ),
  );
  // Creating a signing account from a private key
  const signer = web3.eth.accounts.privateKeyToAccount(
    SIGNER_PRIVATE_KEY,
  );
  web3.eth.accounts.wallet.add(signer);
  console.log("Signer's Address  " + signer.address)

  // 'data' is info of a compiled smart contract that will be responsible  
  // for its deployement, in this code 'data' of a compiled contract from 
  // is used (Contract compiled on Remix IDe)
  let data = ''
  await web3.eth
    .estimateGas(
      {
        from: signer.address,
        data: data
        
      },
      "latest"
    )
    .then((value) => {
      limit = value;
    });

  // Creating the transaction object
  const tx = {
    from: signer.address,
    gas: limit,
    nonce: await web3.eth.getTransactionCount(signer.address),
    maxPriorityFeePerGas: web3.utils.toWei("3", "gwei"),
    maxFeePerGas: web3.utils.toWei("4", "gwei"),
    data: data
  };
  signedTx = await web3.eth.accounts.signTransaction(tx, signer.privateKey);
  console.log("Raw transaction data: " + signedTx.rawTransaction);
  // Sending the transaction to the network
  const receipt = await web3.eth
    .sendSignedTransaction(signedTx.rawTransaction)
    .once("transactionHash", (txhash) => {
      console.log(`Mining transaction ...`);
      console.log(`https://${network}.etherscan.io/tx/${txhash}`);
    });
  // The transaction is now on chain!
  console.log(`Mined in block ${receipt.blockNumber}`);
}
main();